---
- name: Create bootnode security group
  hosts: localhost
  gather_facts: False
  tasks:
  - name: Create Security group
    ec2_group:
      ec2_access_key: "{{ access_key }}"
      ec2_secret_key: "{{ secret_key }}"
      name: "{{ bootnode_security_group }}"
      description: "Default security group"
      region: "{{ region }}"
      purge_rules_egress: false
      purge_rules: false
      vpc_id: "{{ vpc_id | default('') }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
  tags: bootnode


- name: Create bootnode
  hosts: localhost
  gather_facts: False
  vars:
    volumes:
      - device_name: /dev/sda1
        volume_size: 128
        delete_on_termination: true
  tasks:
    - name: Launch instance
      ec2:
        id: "{{ bootnode_instance_name }}"
        ec2_access_key: "{{ access_key }}"
        ec2_secret_key: "{{ secret_key }}"
        key_name: "{{ awskeypair_name }}"
        instance_tags:
          Name: "{{ bootnode_instance_name }}"
        group: "{{ bootnode_security_group }}"
        instance_type: "{{ bootnode_instance_type }}"
        image: "{{ image }}"
        count: "{{ bootnode_count_instances }}"
        wait: yes
        region: "{{ region }}"
        vpc_subnet_id: "{{ vpc_subnet_id | default('') }}"
        volumes: "{{ volumes }}"
        assign_public_ip: yes
      register:   ec2
    - name: Add new instance to host group
      add_host: hostname={{ item.public_ip }} groupname=launched
      with_items: "{{ ec2.instances }}"
    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=90 timeout=320 state=started
      with_items: "{{ ec2.instances }}"
      when: ec2.changed
  tags: bootnode

- name: Installing python
  hosts: launched
  gather_facts: False
  user: ubuntu
  become: True
  vars:
     ansible_ssh_port: 22
  tasks:
    - name: Install python
      raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)

- name: Create bootnode elastic ip
  hosts: localhost
  gather_facts: False
  tasks:
    - name: associate elastic ip for bootnode
      ec2_eip:
        ec2_access_key: "{{ access_key }}"
        ec2_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        reuse_existing_ip_allowed: yes
        state: present
        in_vpc: yes
        device_id: "{{ ec2.instance_ids[0] }}"
      register: instance_elastic_ip
      when: associate_bootnode_elastic_ip == true

    - debug: var=instance_elastic_ip.public_ip
      when: associate_bootnode_elastic_ip == true

- name: EC2 access setup
  hosts: bootnode
  become: True
  roles:
    - bootnode-access